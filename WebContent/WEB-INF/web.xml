<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<!-- 这是项目的名称 -->
	<display-name>simpleProject</display-name>
	
	<!-- 为了spring配置分离，弃用 -->
	<!-- 启动Web容器时，自动装配ApplicationContext的配置信息 -->
	<!--  加载spring上下文，如不配置context-param则默认为/WEB-INF/applicationContext.xml-->
	<!--  <listener>     
	     <listener-class>
	     	org.springframework.web.context.ContextLoaderListener
	     </listener-class> 
	</listener> -->
	<!-- application范围内的参数，存放在servletcontext中 -->
	<!--<context-param>-->
	<!-- 修改context文件位置 -->
       <!--      <param-name>contextConfigLocation</param-name>
           <param-value>classpath:configs/application-config.xml</param-value>
	</context-param>--> 
	
	<!--IntrospectorCleanupListener会在 Web服务器停止时清理Introspector缓存,使那些Javabean能被垃圾回收器正确回收。  -->
	<!--Spring自身不会出现这种问题，但有些程序和框架在使用了JavaBeans Introspector之后,没有进行清理工作如Struct  -->
	<listener>
	     <listener-class>
	     	org.springframework.web.util.IntrospectorCleanupListener
	     </listener-class> 
	</listener>
	<!-- 字符过滤相当于request.setCharacterEncoding("UTF-8");response.setCharacterEncoding("UTF-8"); -->
	<filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
     <servlet>
      <servlet-name>springmvc_dispatcher</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <!-- servlet名字为springmvc,默认查找的是/WEB-INF/springmvc-servlet.xml -->
      <init-param>
          <param-name>contextConfigLocation</param-name>
          <!--  spring-dao主要是jdbc连接，mybatis的sqlSessionFactory等配置，总之和数据库打交道
				spring-quartz很简单，就只是定时器的配置。
				spring-redis是redis的配置
				spring-service是事务、扫描、注解等配置
				spring-web则是springMVC的相关配置 -->
          <param-value>classpath:configs/xml/spring-*.xml</param-value>
      </init-param>    
      <!-- 表示启动容器时初始化该Servlet；如果它存在，则它将在应用程序启动时装在servlet并调用它的init方法。
      	若不存在，则在该servlet的第一个请求时加载 -->
      <load-on-startup>1</load-on-startup>
	</servlet>
	<!-- 这里的<servlet-name>必须与上面的保持一致 -->
	<servlet-mapping>
	      <servlet-name>springmvc_dispatcher</servlet-name> 
	      <url-pattern>/</url-pattern>
	</servlet-mapping>
	
</web-app>
